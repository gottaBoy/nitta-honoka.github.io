<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>honokaのthinking garden</title>
  <subtitle>ファイトだよ！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://honoka.me/"/>
  <updated>2016-05-29T05:35:41.000Z</updated>
  <id>http://honoka.me/</id>
  
  <author>
    <name>honoka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闲谈 git merge 与 git rebase 的区别</title>
    <link href="http://honoka.me/2016/04/28/%E9%97%B2%E8%B0%88%20git%20merge%20%E4%B8%8E%20git%20rebase%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://honoka.me/2016/04/28/闲谈 git merge 与 git rebase 的区别/</id>
    <published>2016-04-28T15:21:36.000Z</published>
    <updated>2016-05-29T05:35:41.000Z</updated>
    
    <content type="html">&lt;p&gt;相信大部分使用 Git 的朋友都会遇见相同的疑问，并且也从网上搜索了不少资料。那么，为什么我还要写这篇文章呢？因为我想尝试从自己的角度解释这个问题，如果能给到大家灵光一闪的感悟，便善莫大焉啦。估计点进来的朋友也对 merge 和 rebase 有了一定了解，所以我也就不浪费篇幅再去详细介绍 merge 和 rebase，让我们直入主题吧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;merge-与-rebase-的区别&quot;&gt;&lt;a href=&quot;#merge-与-rebase-的区别&quot; class=&quot;headerlink&quot; title=&quot;merge 与 rebase 的区别&quot;&gt;&lt;/a&gt;merge 与 rebase 的区别&lt;/h2&gt;&lt;h3 id=&quot;merge-以下说明都基于-merge-的默认操作&quot;&gt;&lt;a href=&quot;#merge-以下说明都基于-merge-的默认操作&quot; class=&quot;headerlink&quot; title=&quot;merge(以下说明都基于 merge 的默认操作)&quot;&gt;&lt;/a&gt;merge(以下说明都基于 merge 的默认操作)&lt;/h3&gt;&lt;p&gt;现在假设我们有一个主分支 master 及一个开发分支 deve，仓库历史就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xinvi.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-26%2021.58.22.png&quot; alt=&quot;初始仓库历史&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在如果在 master 分支上 &lt;code&gt;git merge deve&lt;/code&gt;：Git 会自动根据两个分支的共同祖先即 &lt;code&gt;e381a81&lt;/code&gt; 这个 commit 和两个分支的最新提交即 &lt;code&gt;8ab7cff&lt;/code&gt; 和 &lt;code&gt;696398a&lt;/code&gt; 进行一个三方合并，然后将&lt;strong&gt;合并中修改的内容生成一个新的 commit&lt;/strong&gt;，即下图的 &lt;code&gt;78941cb&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xinvi.com1.z0.glb.clouddn.com/hexo%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-26%2022.08.28.png&quot; alt=&quot;merge 合并图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;rebase&quot;&gt;&lt;a href=&quot;#rebase&quot; class=&quot;headerlink&quot; title=&quot;rebase&quot;&gt;&lt;/a&gt;rebase&lt;/h3&gt;&lt;p&gt;rebase 是什么情况呢？还是一个初始的仓库历史图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xinvi.com1.z0.glb.clouddn.com/hexo%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-26%2022.20.15.png&quot; alt=&quot;rebase初始仓库历史&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是在 master 分支上 &lt;code&gt;git rebase deve&lt;/code&gt;：Git 会从两个分支的共同祖先 &lt;code&gt;3311ba0&lt;/code&gt; 开始提取 master 分支（当前所在分支）上的修改，即 &lt;code&gt;85841be&lt;/code&gt;、&lt;code&gt;a016f64&lt;/code&gt; 与 &lt;code&gt;e53ec51&lt;/code&gt;，再将 master 分支指向 deve 的最新提交（目标分支）即 &lt;code&gt;35b6708&lt;/code&gt; 处，然后将刚刚提取的修改依次应用到这个最新提交后面。操作会舍弃 master 分支上提取的 commit，同时&lt;strong&gt;不会像 merge 一样生成一个合并修改内容的 commit，相当于把 master 分支（当前所在分支）上的修改在 deve 分支（目标分支）上原样复制了一遍&lt;/strong&gt;,操作完成后的版本历史就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xinvi.com1.z0.glb.clouddn.com/hexo%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-26%2022.26.23.png&quot; alt=&quot;rebase 合并图&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看见 master 分支从 deve 分支最新提交 &lt;code&gt;35b6708&lt;/code&gt; 开始依次提交了自己的三个 commit（由于是提取修改后重新依次提交，故 commit 的 hash 码与上面的&lt;code&gt;85841be&lt;/code&gt;、&lt;code&gt;a016f64&lt;/code&gt;、&lt;code&gt;e53ec51&lt;/code&gt; 不同）。&lt;/p&gt;
&lt;h3 id=&quot;rebase-i&quot;&gt;&lt;a href=&quot;#rebase-i&quot; class=&quot;headerlink&quot; title=&quot;rebase -i&quot;&gt;&lt;/a&gt;rebase -i&lt;/h3&gt;&lt;p&gt;rebase 操作加上 &lt;code&gt;-i&lt;/code&gt; 选项可以更直观的看见被提取的 commit 信息。&lt;/p&gt;
&lt;p&gt;仍然在 master 分支上 rebase deve 分支，不过这次要加上 &lt;code&gt;-i&lt;/code&gt; 选项，即 &lt;code&gt;git rebase -i deve&lt;/code&gt;，然后我们可以得到这样一个文本信息框&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xinvi.com1.z0.glb.clouddn.com/C48C3A61-64FD-4BD5-BD42-2CBF11937B4F.png&quot; alt=&quot;rebase -i信息&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 区域内的信息说明了这次 rebase 操作提取了哪些 commit 记录（&lt;code&gt;f9a7673&lt;/code&gt; 与 &lt;code&gt;edb2ba2&lt;/code&gt;），会连接到目标分支的哪个 commit （&lt;code&gt;9c86a5c&lt;/code&gt;）后面。可以根据 B 区域中的命令说明修改 &lt;code&gt;pick&lt;/code&gt; 为其他命令，对该次提取出来的 commit 做额外的操作&lt;/li&gt;
&lt;li&gt;B 区域内说明了本次 rebase 操作可以选用的命令&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;:wq&lt;/code&gt; 保存退出后，就会按照刚刚在 A 区域内设定的命令处理 commit 并 rebase。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;冲突处理策略的不同&quot;&gt;&lt;a href=&quot;#冲突处理策略的不同&quot; class=&quot;headerlink&quot; title=&quot;冲突处理策略的不同&quot;&gt;&lt;/a&gt;冲突处理策略的不同&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;merge 遇见冲突后会直接停止，等待手动解决冲突并重新提交 commit 后，才能再次 merge&lt;/li&gt;
&lt;li&gt;rebase 遇见冲突后会暂停当前操作，开发者可以选择手动解决冲突，然后 &lt;code&gt;git rebase --continue&lt;/code&gt; 继续，或者 &lt;code&gt;--skip&lt;/code&gt; 跳过（注意此操作中当前分支的修改会直接覆盖目标分支的冲突部分），亦或者 &lt;code&gt;--abort&lt;/code&gt; 直接停止该次 rebase 操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结：选择-merge-还是-rebase？&quot;&gt;&lt;a href=&quot;#总结：选择-merge-还是-rebase？&quot; class=&quot;headerlink&quot; title=&quot;总结：选择 merge 还是 rebase？&quot;&gt;&lt;/a&gt;总结：选择 merge 还是 rebase？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容&lt;/li&gt;
&lt;li&gt;merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面&lt;/li&gt;
&lt;li&gt;rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面&lt;/li&gt;
&lt;li&gt;rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面&lt;/li&gt;
&lt;li&gt;merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定。但是在大部分情况下，个人建议使用 rebase + merge –ff-only 的组合，这样可以使整个版本历史更加简洁，在大型项目中的效果可以参考 GO 的版本历史。&lt;/li&gt;
&lt;li&gt;merge 和 rebase 还有很多强大的选项，可以使用 &lt;code&gt;git help &amp;lt;command&amp;gt;&lt;/code&gt; 查看&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;最后：一些注意点&quot;&gt;&lt;a href=&quot;#最后：一些注意点&quot; class=&quot;headerlink&quot; title=&quot;最后：一些注意点&quot;&gt;&lt;/a&gt;最后：一些注意点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 merge 时应考虑采用默认操作，还是 &lt;code&gt;--no-ff&lt;/code&gt; 或 &lt;code&gt;--ff-only&lt;/code&gt; 的方式&lt;/li&gt;
&lt;li&gt;rebase 操作会丢弃当前分支已提交的 commit，故不要在已经 push 到远程，和其他人正在协作开发的分支上执行 rebase 操作&lt;/li&gt;
&lt;li&gt;与远程仓库同步时，使用 pull 命令默认进行了 &lt;code&gt;git fetch + git merge&lt;/code&gt; 两个操作，可以通过加上 &lt;code&gt;--rebase&lt;/code&gt; 命令将 fetch 后的 merge 操作改为 rebase 操作，或者仅仅 ‘git fetch remoteName’,然后才思考采取哪种整合策略 &lt;code&gt;git merge(or rebase) origin/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开发与 commit 时注意自己此时在哪个分支上&lt;/li&gt;
&lt;li&gt;当有修改未 commit 时，不能进行 rebase 操作，此时可以考虑先用 &lt;code&gt;git stash&lt;/code&gt; 命令暂存&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProGit 2nd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/28140434/is-there-a-difference-between-git-rebase-and-git-merge-ff-only&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stackoverflow:Is there a difference between git rebase and git merge –ff-only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/07/git.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git分支管理策略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;相信大部分使用 Git 的朋友都会遇见相同的疑问，并且也从网上搜索了不少资料。那么，为什么我还要写这篇文章呢？因为我想尝试从自己的角度解释这个问题，如果能给到大家灵光一闪的感悟，便善莫大焉啦。估计点进来的朋友也对 merge 和 rebase 有了一定了解，所以我也就不浪费篇幅再去详细介绍 merge 和 rebase，让我们直入主题吧。&lt;/p&gt;
    
    </summary>
    
      <category term="编程技术" scheme="http://honoka.me/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="http://honoka.me/tags/Git/"/>
    
  </entry>
  
</feed>
